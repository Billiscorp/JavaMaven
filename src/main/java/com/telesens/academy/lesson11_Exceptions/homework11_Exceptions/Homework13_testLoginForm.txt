1) Клонировать приложение с удаленного репозитория git:
> git clone  https://github.com/Oleg-Afanasiev/login-form-fx.git

2) Сделать сборку приложения используя Maven - из каталога, в котором
находится 'pom.xml' файл выполнить команду:
> mvn clean install

3) Запустить приложение: 
	Перейти в каталог target, где находится файл приложения 'login-form-1.0.jar' 
	и выполнить команду:
> java -cp login-form-1.0.jar com.academy.fx.AppMain
	=> в результате откроется окно с приглашением ввести логин и пароль

4) Перейти по ссылке Register в окно регистрации нового пользователя.
	=> откроется форма 'Registration' создания нового пользователя

		При запуске в системе уже существует пользователь:
			first name: test
			last name: test
			email: test@mail.com
			
		Поле email - является уникальным идентификатором для каждого пользователя
		
		Заполнив корректно форму можно создать нового пользователя.
		Если поля формы заполнены неверно, то увидим сообщение об ошибке.
		
	Список всех пользователей уже зарегистрированных можно увидеть на странице 'admin'
	
5) Протестировать вручную функционал валидации полей формы. 
6) Написать автотесты функционала валидации полей формы.
	- для этого нужно подключить собранное приложение к проекту добавив в pom.xml зависимость:
	
		<dependency>
            <groupId>com.academy.fx</groupId>
            <artifactId>login-form</artifactId>
            <version>1.0</version>
        </dependency>
		
	
	- Для тестов создать класс 'RegistrationFormValidatorTests' 
	- создать методы для тестов:
		'testFirstNameValidation'
		'testLastNameValidation'
		'testEmailValidation'
		'testPasswordValidation'
		'testConfirmPasswordValidation'
		'testExistenceUserValidatation'
		
		Все тесты должны проверить поведение формы валидации по следующему сценарию:
	
----------	СЦЕНАРИЙ  ----------
		1. Если введенное значение в поле 'First Name' оставить пустым, 
		то по нажатии кнопки 'Register' увидим сообщение об ошибке:
			"Empty field 'First Name'"
			
		2. Если введенное значение в поле 'Last Name' оставить пустым, 
		то по нажатии кнопки 'Register' увидим сообщение об ошибке:
			"Empty field 'Last Name'"
			
		3. Если введенное значение в поле 'E-mail' оставить пустым, 
		то по нажатии кнопки 'Register' увидим сообщение об ошибке:
			"Empty field 'E-mail'"
			
		4. Если ввести некорректный email (напр. 'my-mail.ru', 
		то по нажатии кнопки 'Register' увидим сообщение об ошибке:
			"Not correct format of email 'my-mail.ru'"
			
			- корректным email считается следующим: 
				a) должен содержать один символ '@'
				b) перед символом '@' должно быть как минимум 2 символа
				c) после символа '@' должно быть как минимум 2 символа
				d) часть email до символа '@' не может начинаться и заканчивать точкой (.) 
				e) часть email после символа '@' не может начинаться и заканчивать точкой (.) 
				
		5) Если введенное значение в поле 'Password' оставить пустым, 
		то по нажатии кнопки 'Register' увидим сообщение об ошибке:
			"Empty field password"
			
		6) Если введенное значение в поле 'Password' содержит менее 8 символов, 
		то по нажатии кнопки 'Register' увидим сообщение об ошибке:
			"Short password"
			
		7) Если введенное значение в поле 'Password' содержит более 7 символом, но не содержит хотя бы одну цифру, 
		то по нажатии кнопки 'Register' увидим сообщение об ошибке:
			"Password must conatin digit"
	
		8) Если введенное значение в поле 'Password' содержит более 7 символом, содержит хотя бы одну цифру, 
		но не содержит символ латинице в верхнем регистре, 
		то по нажатии кнопки 'Register' увидим сообщение об ошибке:
			"Password must conatin upper symbols"
			
		9) Если введенное значение в поле 'Password' содержит более 7 символом, содержит хотя бы одну цифру, 
		но не содержит символ латинице в нижнем регистре, 
		то по нажатии кнопки 'Register' увидим сообщение об ошибке:
			"Password must conatin lower symbols"
			
		10) Если введенное значения в поля 'Password' и 'Confirm' не совпадают, 
		то по нажатии кнопки 'Register' увидим сообщение об ошибке:
			"Not equals passwords"
			
		11) Если все поля заполнены корректно, но пользователь с введенным 'E-mail' (test@mail.ru) уже существует, 
		то по нажатии кнопки 'Register' увидим сообщение об ошибке:
			"User with email 'test@mail.ru' already exists"
			
		12) Если все поля заполнены корректно, и email уникальный, то по нажатии кнопки 'Register' будет создан новый пользоавтель и откроется окно со списком уже зарегестрированных пользователей в системе.
		
	---- ДЛЯ АВТОТЕСТОВ----
	1) Создать класс, позволяющий заполнить поля формы:
	
	RegistrationForm registrationForm = new RegistrationForm()
                .withFirstName("", "test")
                .withLastName("", "test")
                .withMail("", "test@mail.ru")
                .withPassword("", "1qweEtyuiq")
                .withConfirmPassword("q", "1qweEtyuiq");
	
	2) Для валидации использовать класс:
	RegistrationValidator validator = new RegistrationValidator();
	boolean isValid = validator.validate(registrationForm);

	3) Сообщение об ошибке после выполнения валидации можно взять так:
		String msgError = validator.getMsgError();
		
	--- ТРЕБОВАНИЯ К АВТОТЕСТАМ ---
	
	1. Тестировать нужно каждое поле отдельно
	2. Тесты должны быть независимы один от другого
	3. Тестовые данные должны быть изолированы от тестов 
	4. Запускать тесты с помощью Maven, используя TestNG библиотеку